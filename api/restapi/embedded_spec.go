// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Loxilb REST API for Baremetal Scenarios",
    "title": "Loxilb Rest API",
    "version": "0.0.1"
  },
  "host": "0.0.0.0:8090",
  "basePath": "/netlox/v1",
  "paths": {
    "/config/conntrack/all": {
      "get": {
        "description": "Get all of the conntrack infomation for all of the service.",
        "summary": "Get all of the conntrack entries.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ctAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ConntrackEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address": {
      "post": {
        "description": "Assign IPv4 addresses in the device",
        "summary": "Assign IPv4 addresses in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPv4AddressEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/all": {
      "get": {
        "description": "Get IPv4 addresses in the device(interface)",
        "summary": "Get IPv4 addresses in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ipAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IPv4AddressGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/{ip_address}/{mask}/dev/{if_name}": {
      "delete": {
        "description": "Delete IPv4 addresses in the device",
        "summary": "Delete IPv4 addresses in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes IPv4 mask in the device",
            "name": "mask",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer": {
      "post": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadbalanceEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostSuccess"
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/all": {
      "get": {
        "description": "Get all of the load balancer services with conntrack infomation.",
        "summary": "Get all of the load balancer services",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "lbAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoadbalanceEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete all load balancer services.",
        "summary": "Delete all Load balancer services",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/protocol/{proto}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror": {
      "post": {
        "description": "Create a new Mirror config.",
        "summary": "Create a new Mirror config",
        "parameters": [
          {
            "description": "Attributes for Mirror",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MirrorEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "mirrAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MirrorGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Mirror service.",
        "summary": "Delete a Mirror service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Mirror Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy": {
      "post": {
        "description": "Create a new Policy QoS config.",
        "summary": "Create a new Policy QoS config",
        "parameters": [
          {
            "description": "Attributes for Policy",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "polAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PolicyEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Policy QoS service.",
        "summary": "Delete a Policy QoS service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Policy Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/port/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "portAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PortEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route": {
      "post": {
        "description": "Create a new route config .",
        "summary": "Create a new route config",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/all": {
      "get": {
        "description": "Get all route table",
        "summary": "Get all route table",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routeAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RouteGetEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/destinationIPNet/{ip_address}/{mask}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for destinaion route address",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Attributes for destination route",
            "name": "mask",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "sessionAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/ident/{ident}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionUlClEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ulclAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionUlClEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/ident/{ident}/ulclAddress/{ip_address}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for session ulcl address",
            "name": "ip_address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConntrackEntry": {
      "type": "object",
      "properties": {
        "bytes": {
          "description": "Packet bytes of the conntrack",
          "type": "integer"
        },
        "conntrackAct": {
          "description": "value for Conntrack Act",
          "type": "string"
        },
        "conntrackState": {
          "description": "value for Conntrack state",
          "type": "string"
        },
        "destinationIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "destinationPort": {
          "description": "port number for the access",
          "type": "integer"
        },
        "packets": {
          "description": "Packet counts of the conntrack",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "sourceIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "sourcePort": {
          "description": "port number for the access",
          "type": "integer"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "sub-code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "IPv4AddressEntry": {
      "type": "object",
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address to modify.",
          "type": "string"
        }
      }
    },
    "IPv4AddressGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        }
      }
    },
    "LoadbalanceEntry": {
      "type": "object",
      "properties": {
        "endpoints": {
          "description": "values of End point servers",
          "type": "array",
          "items": {
            "properties": {
              "endpointIP": {
                "description": "IP address for externel access",
                "type": "string"
              },
              "targetPort": {
                "description": "port number for access service",
                "type": "integer"
              },
              "weight": {
                "description": "Weight for the load balancing",
                "type": "integer"
              }
            }
          }
        },
        "serviceArguments": {
          "type": "object",
          "properties": {
            "bgp": {
              "description": "value for BGP enable or not",
              "type": "boolean"
            },
            "externalIP": {
              "description": "IP address for externel access",
              "type": "string"
            },
            "port": {
              "description": "port number for the access",
              "type": "integer"
            },
            "protocol": {
              "description": "value for access protocol",
              "type": "string"
            },
            "sel": {
              "description": "value for load balance algorithim",
              "type": "integer"
            }
          }
        }
      }
    },
    "MirrorEntry": {
      "type": "object",
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
              "type": "integer"
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "MirrorGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
              "type": "integer"
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "Neighborv4Mod": {
      "type": "object",
      "properties": {
        "IpAddress": {
          "description": "IP address to neighbor",
          "type": "string"
        }
      }
    },
    "PolicyEntry": {
      "type": "object",
      "properties": {
        "policyIdent": {
          "description": "Policy name",
          "type": "string"
        },
        "policyInfo": {
          "type": "object",
          "properties": {
            "colorAware": {
              "description": "Policy color for QoS",
              "type": "boolean"
            },
            "committedBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "committedInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "excessBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "peakInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "type": {
              "description": "policy type",
              "type": "integer"
            }
          }
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "polObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "PortEntry": {
      "type": "object",
      "properties": {
        "DataplaneSync": {
          "description": "Dataplan Sync check",
          "type": "integer"
        },
        "portHardwareInformation": {
          "type": "object",
          "properties": {
            "link": {
              "description": "link status",
              "type": "boolean"
            },
            "macAddress": {
              "description": "MAC address of the port",
              "type": "string"
            },
            "master": {
              "description": "Port's mater",
              "type": "string"
            },
            "mtu": {
              "description": "MTU of the port",
              "type": "integer"
            },
            "rawMacAddress": {
              "description": "MAC address written by byte array",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "real": {
              "description": "real port..",
              "type": "string"
            },
            "state": {
              "description": "state...",
              "type": "boolean"
            },
            "tunnelId": {
              "description": "Tunnel Id such as VxLAN.",
              "type": "integer"
            }
          }
        },
        "portL2Information": {
          "type": "object",
          "properties": {
            "isPvid": {
              "description": "Is PVID config or not",
              "type": "boolean"
            },
            "vid": {
              "description": "virtual lan id(VLAN ID)",
              "type": "integer"
            }
          }
        },
        "portL3Information": {
          "type": "object",
          "properties": {
            "IPv4Address": {
              "description": "List of IP address v4",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "IPv6Address": {
              "description": "List of the IP address v6",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "routed": {
              "description": "Is routed or not",
              "type": "boolean"
            }
          }
        },
        "portName": {
          "description": "The name of the Port interface",
          "type": "string"
        },
        "portNo": {
          "description": "Index of the Port",
          "type": "integer"
        },
        "portSoftwareInformation": {
          "type": "object",
          "properties": {
            "bpfLoaded": {
              "description": "The status of the eBPF loaded",
              "type": "boolean"
            },
            "osId": {
              "description": "The ID of the Port in the software(OS)",
              "type": "integer"
            },
            "portActive": {
              "description": "Activation status of the port",
              "type": "boolean"
            },
            "portProp": {
              "description": "Priority of the port",
              "type": "integer"
            },
            "portType": {
              "description": "port type",
              "type": "integer"
            }
          }
        },
        "portStatisticInformation": {
          "type": "object",
          "properties": {
            "rxBytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "rxErrors": {
              "description": "Statistic of the number of ingress Error packets.",
              "type": "integer"
            },
            "rxPackets": {
              "description": "Statistic of the number of ingress packets.",
              "type": "integer"
            },
            "txBytes": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            },
            "txErrors": {
              "description": "Statistic of the number of egress Error packets.",
              "type": "integer"
            },
            "txPackets": {
              "description": "Statistic of the number of egress packets.",
              "type": "integer"
            }
          }
        },
        "zone": {
          "description": "network zone",
          "type": "string"
        }
      }
    },
    "PostSuccess": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "RouteEntry": {
      "type": "object",
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        }
      }
    },
    "RouteGetEntry": {
      "type": "object",
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "flags": {
          "description": "Route flags",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        },
        "hardwareMark": {
          "description": "index of the route",
          "type": "integer"
        },
        "protocol": {
          "description": "Route protocol",
          "type": "integer"
        },
        "statistic": {
          "type": "object",
          "required": [
            "bytes",
            "packets"
          ],
          "properties": {
            "bytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "packets": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            }
          }
        },
        "sync": {
          "type": "integer"
        }
      }
    },
    "SessionEntry": {
      "type": "object",
      "properties": {
        "accessNetworkTunnel": {
          "type": "object",
          "properties": {
            "TeID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "coreNetworkTunnel": {
          "type": "object",
          "properties": {
            "teID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Connection network IP address",
              "type": "string"
            }
          }
        },
        "ident": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "sessionIP": {
          "description": "IP address for nexthop",
          "type": "string"
        }
      }
    },
    "SessionUlClEntry": {
      "type": "object",
      "properties": {
        "ulclArgument": {
          "type": "object",
          "properties": {
            "qfi": {
              "description": "QFI number",
              "type": "integer"
            },
            "ulclIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "ulclIdent": {
          "description": "IP address and netmask",
          "type": "string"
        }
      }
    },
    "VlanPortMod": {
      "type": "object",
      "properties": {
        "Dev": {
          "description": "Interface device name",
          "type": "string"
        },
        "Tagged": {
          "description": "Tagged status added",
          "type": "boolean"
        },
        "Vid": {
          "description": "Vlan ID",
          "type": "number"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Loxilb REST API for Baremetal Scenarios",
    "title": "Loxilb Rest API",
    "version": "0.0.1"
  },
  "host": "0.0.0.0:8090",
  "basePath": "/netlox/v1",
  "paths": {
    "/config/conntrack/all": {
      "get": {
        "description": "Get all of the conntrack infomation for all of the service.",
        "summary": "Get all of the conntrack entries.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ctAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ConntrackEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address": {
      "post": {
        "description": "Assign IPv4 addresses in the device",
        "summary": "Assign IPv4 addresses in the device",
        "parameters": [
          {
            "description": "Attributes for IPv4 address",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPv4AddressEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/all": {
      "get": {
        "description": "Get IPv4 addresses in the device(interface)",
        "summary": "Get IPv4 addresses in the device(interface)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ipAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IPv4AddressGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/ipv4address/{ip_address}/{mask}/dev/{if_name}": {
      "delete": {
        "description": "Delete IPv4 addresses in the device",
        "summary": "Delete IPv4 addresses in the device",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes IPv4 Address in the device",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes IPv4 mask in the device",
            "name": "mask",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes of the target device",
            "name": "if_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer": {
      "post": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadbalanceEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PostSuccess"
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/all": {
      "get": {
        "description": "Get all of the load balancer services with conntrack infomation.",
        "summary": "Get all of the load balancer services",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "lbAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoadbalanceEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Delete all load balancer services.",
        "summary": "Delete all Load balancer services",
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/loadbalancer/externalipaddress/{ip_address}/port/{port}/protocol/{proto}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "description": "Attributes for load balance service",
            "name": "port",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for load balance service",
            "name": "proto",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "option for BGP enable",
            "name": "bgp",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror": {
      "post": {
        "description": "Create a new Mirror config.",
        "summary": "Create a new Mirror config",
        "parameters": [
          {
            "description": "Attributes for Mirror",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MirrorEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "mirrAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MirrorGetEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/mirror/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Mirror service.",
        "summary": "Delete a Mirror service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Mirror Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy": {
      "post": {
        "description": "Create a new Policy QoS config.",
        "summary": "Create a new Policy QoS config",
        "parameters": [
          {
            "description": "Attributes for Policy",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "polAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PolicyEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/policy/ident/{ident}": {
      "delete": {
        "description": "Delete a new Create a Policy QoS service.",
        "summary": "Delete a Policy QoS service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes of Policy Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/port/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "portAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PortEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route": {
      "post": {
        "description": "Create a new route config .",
        "summary": "Create a new route config",
        "parameters": [
          {
            "description": "Attributes for load balance service",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/all": {
      "get": {
        "description": "Get all route table",
        "summary": "Get all route table",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "routeAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RouteGetEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/route/destinationIPNet/{ip_address}/{mask}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes for destinaion route address",
            "name": "ip_address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Attributes for destination route",
            "name": "mask",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/all": {
      "get": {
        "description": "Get all of the port interfaces.",
        "summary": "Get all of the port interfaces",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "sessionAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/session/ident/{ident}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl": {
      "post": {
        "description": "Create a new session config for 5G.",
        "summary": "Create a new session config",
        "parameters": [
          {
            "description": "Attributes for 5G service session",
            "name": "attr",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SessionUlClEntry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/all": {
      "get": {
        "description": "Get",
        "summary": "Get",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ulclAttr": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SessionUlClEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/config/sessionulcl/ident/{ident}/ulclAddress/{ip_address}": {
      "delete": {
        "description": "Create a new load balancer service with .",
        "summary": "Create a new Load balancer service",
        "parameters": [
          {
            "type": "string",
            "description": "Attributes 5G session Ident.",
            "name": "ident",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Attributes for session ulcl address",
            "name": "ip_address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Malformed arguments for API call",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Invalid authentication credentials",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Capacity insufficient",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Resource Conflict. VLAN already exists OR dependency VRF/VNET not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal service error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Maintanence mode",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConntrackEntry": {
      "type": "object",
      "properties": {
        "bytes": {
          "description": "Packet bytes of the conntrack",
          "type": "integer"
        },
        "conntrackAct": {
          "description": "value for Conntrack Act",
          "type": "string"
        },
        "conntrackState": {
          "description": "value for Conntrack state",
          "type": "string"
        },
        "destinationIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "destinationPort": {
          "description": "port number for the access",
          "type": "integer"
        },
        "packets": {
          "description": "Packet counts of the conntrack",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "sourceIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "sourcePort": {
          "description": "port number for the access",
          "type": "integer"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "sub-code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "IPv4AddressEntry": {
      "type": "object",
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address to modify.",
          "type": "string"
        }
      }
    },
    "IPv4AddressGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "dev": {
          "description": "Name of the interface device to which you want to modify the IP address",
          "type": "string"
        },
        "ipAddress": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        }
      }
    },
    "LoadbalanceEntry": {
      "type": "object",
      "properties": {
        "endpoints": {
          "description": "values of End point servers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadbalanceEntryEndpointsItems0"
          }
        },
        "serviceArguments": {
          "type": "object",
          "properties": {
            "bgp": {
              "description": "value for BGP enable or not",
              "type": "boolean"
            },
            "externalIP": {
              "description": "IP address for externel access",
              "type": "string"
            },
            "port": {
              "description": "port number for the access",
              "type": "integer"
            },
            "protocol": {
              "description": "value for access protocol",
              "type": "string"
            },
            "sel": {
              "description": "value for load balance algorithim",
              "type": "integer"
            }
          }
        }
      }
    },
    "LoadbalanceEntryEndpointsItems0": {
      "properties": {
        "endpointIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "targetPort": {
          "description": "port number for access service",
          "type": "integer"
        },
        "weight": {
          "description": "Weight for the load balancing",
          "type": "integer"
        }
      }
    },
    "LoadbalanceEntryServiceArguments": {
      "type": "object",
      "properties": {
        "bgp": {
          "description": "value for BGP enable or not",
          "type": "boolean"
        },
        "externalIP": {
          "description": "IP address for externel access",
          "type": "string"
        },
        "port": {
          "description": "port number for the access",
          "type": "integer"
        },
        "protocol": {
          "description": "value for access protocol",
          "type": "string"
        },
        "sel": {
          "description": "value for load balance algorithim",
          "type": "integer"
        }
      }
    },
    "MirrorEntry": {
      "type": "object",
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
              "type": "integer"
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "MirrorEntryMirrorInfo": {
      "type": "object",
      "properties": {
        "port": {
          "description": "Port where mirrored traffic needs to be sent",
          "type": "string"
        },
        "remoteIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "sourceIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "tunnelID": {
          "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "integer"
        },
        "type": {
          "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
          "type": "integer"
        },
        "vlan": {
          "description": "For RSPAN we may need to send tagged mirror traffic",
          "type": "integer"
        }
      }
    },
    "MirrorEntryTargetObject": {
      "type": "object",
      "properties": {
        "attachment": {
          "description": "Target Attachment",
          "type": "integer"
        },
        "mirrObjName": {
          "description": "Target Names",
          "type": "string"
        }
      }
    },
    "MirrorGetEntry": {
      "type": "object",
      "required": [
        "sync"
      ],
      "properties": {
        "mirrorIdent": {
          "description": "Mirror name",
          "type": "string"
        },
        "mirrorInfo": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port where mirrored traffic needs to be sent",
              "type": "string"
            },
            "remoteIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "sourceIP": {
              "description": "For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "string"
            },
            "tunnelID": {
              "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
              "type": "integer"
            },
            "type": {
              "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
              "type": "integer"
            },
            "vlan": {
              "description": "For RSPAN we may need to send tagged mirror traffic",
              "type": "integer"
            }
          }
        },
        "sync": {
          "description": "Sync - sync state",
          "type": "integer"
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "mirrObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "MirrorGetEntryMirrorInfo": {
      "type": "object",
      "properties": {
        "port": {
          "description": "Port where mirrored traffic needs to be sent",
          "type": "string"
        },
        "remoteIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "sourceIP": {
          "description": "For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "string"
        },
        "tunnelID": {
          "description": "mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic",
          "type": "integer"
        },
        "type": {
          "description": "One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan",
          "type": "integer"
        },
        "vlan": {
          "description": "For RSPAN we may need to send tagged mirror traffic",
          "type": "integer"
        }
      }
    },
    "MirrorGetEntryTargetObject": {
      "type": "object",
      "properties": {
        "attachment": {
          "description": "Target Attachment",
          "type": "integer"
        },
        "mirrObjName": {
          "description": "Target Names",
          "type": "string"
        }
      }
    },
    "Neighborv4Mod": {
      "type": "object",
      "properties": {
        "IpAddress": {
          "description": "IP address to neighbor",
          "type": "string"
        }
      }
    },
    "PolicyEntry": {
      "type": "object",
      "properties": {
        "policyIdent": {
          "description": "Policy name",
          "type": "string"
        },
        "policyInfo": {
          "type": "object",
          "properties": {
            "colorAware": {
              "description": "Policy color for QoS",
              "type": "boolean"
            },
            "committedBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "committedInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "excessBlkSize": {
              "description": "policy type",
              "type": "integer"
            },
            "peakInfoRate": {
              "description": "policy type",
              "type": "integer"
            },
            "type": {
              "description": "policy type",
              "type": "integer"
            }
          }
        },
        "targetObject": {
          "type": "object",
          "properties": {
            "attachment": {
              "description": "Target Attachment",
              "type": "integer"
            },
            "polObjName": {
              "description": "Target Names",
              "type": "string"
            }
          }
        }
      }
    },
    "PolicyEntryPolicyInfo": {
      "type": "object",
      "properties": {
        "colorAware": {
          "description": "Policy color for QoS",
          "type": "boolean"
        },
        "committedBlkSize": {
          "description": "policy type",
          "type": "integer"
        },
        "committedInfoRate": {
          "description": "policy type",
          "type": "integer"
        },
        "excessBlkSize": {
          "description": "policy type",
          "type": "integer"
        },
        "peakInfoRate": {
          "description": "policy type",
          "type": "integer"
        },
        "type": {
          "description": "policy type",
          "type": "integer"
        }
      }
    },
    "PolicyEntryTargetObject": {
      "type": "object",
      "properties": {
        "attachment": {
          "description": "Target Attachment",
          "type": "integer"
        },
        "polObjName": {
          "description": "Target Names",
          "type": "string"
        }
      }
    },
    "PortEntry": {
      "type": "object",
      "properties": {
        "DataplaneSync": {
          "description": "Dataplan Sync check",
          "type": "integer"
        },
        "portHardwareInformation": {
          "type": "object",
          "properties": {
            "link": {
              "description": "link status",
              "type": "boolean"
            },
            "macAddress": {
              "description": "MAC address of the port",
              "type": "string"
            },
            "master": {
              "description": "Port's mater",
              "type": "string"
            },
            "mtu": {
              "description": "MTU of the port",
              "type": "integer"
            },
            "rawMacAddress": {
              "description": "MAC address written by byte array",
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "real": {
              "description": "real port..",
              "type": "string"
            },
            "state": {
              "description": "state...",
              "type": "boolean"
            },
            "tunnelId": {
              "description": "Tunnel Id such as VxLAN.",
              "type": "integer"
            }
          }
        },
        "portL2Information": {
          "type": "object",
          "properties": {
            "isPvid": {
              "description": "Is PVID config or not",
              "type": "boolean"
            },
            "vid": {
              "description": "virtual lan id(VLAN ID)",
              "type": "integer"
            }
          }
        },
        "portL3Information": {
          "type": "object",
          "properties": {
            "IPv4Address": {
              "description": "List of IP address v4",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "IPv6Address": {
              "description": "List of the IP address v6",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "routed": {
              "description": "Is routed or not",
              "type": "boolean"
            }
          }
        },
        "portName": {
          "description": "The name of the Port interface",
          "type": "string"
        },
        "portNo": {
          "description": "Index of the Port",
          "type": "integer"
        },
        "portSoftwareInformation": {
          "type": "object",
          "properties": {
            "bpfLoaded": {
              "description": "The status of the eBPF loaded",
              "type": "boolean"
            },
            "osId": {
              "description": "The ID of the Port in the software(OS)",
              "type": "integer"
            },
            "portActive": {
              "description": "Activation status of the port",
              "type": "boolean"
            },
            "portProp": {
              "description": "Priority of the port",
              "type": "integer"
            },
            "portType": {
              "description": "port type",
              "type": "integer"
            }
          }
        },
        "portStatisticInformation": {
          "type": "object",
          "properties": {
            "rxBytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "rxErrors": {
              "description": "Statistic of the number of ingress Error packets.",
              "type": "integer"
            },
            "rxPackets": {
              "description": "Statistic of the number of ingress packets.",
              "type": "integer"
            },
            "txBytes": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            },
            "txErrors": {
              "description": "Statistic of the number of egress Error packets.",
              "type": "integer"
            },
            "txPackets": {
              "description": "Statistic of the number of egress packets.",
              "type": "integer"
            }
          }
        },
        "zone": {
          "description": "network zone",
          "type": "string"
        }
      }
    },
    "PortEntryPortHardwareInformation": {
      "type": "object",
      "properties": {
        "link": {
          "description": "link status",
          "type": "boolean"
        },
        "macAddress": {
          "description": "MAC address of the port",
          "type": "string"
        },
        "master": {
          "description": "Port's mater",
          "type": "string"
        },
        "mtu": {
          "description": "MTU of the port",
          "type": "integer"
        },
        "rawMacAddress": {
          "description": "MAC address written by byte array",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "real": {
          "description": "real port..",
          "type": "string"
        },
        "state": {
          "description": "state...",
          "type": "boolean"
        },
        "tunnelId": {
          "description": "Tunnel Id such as VxLAN.",
          "type": "integer"
        }
      }
    },
    "PortEntryPortL2Information": {
      "type": "object",
      "properties": {
        "isPvid": {
          "description": "Is PVID config or not",
          "type": "boolean"
        },
        "vid": {
          "description": "virtual lan id(VLAN ID)",
          "type": "integer"
        }
      }
    },
    "PortEntryPortL3Information": {
      "type": "object",
      "properties": {
        "IPv4Address": {
          "description": "List of IP address v4",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IPv6Address": {
          "description": "List of the IP address v6",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "routed": {
          "description": "Is routed or not",
          "type": "boolean"
        }
      }
    },
    "PortEntryPortSoftwareInformation": {
      "type": "object",
      "properties": {
        "bpfLoaded": {
          "description": "The status of the eBPF loaded",
          "type": "boolean"
        },
        "osId": {
          "description": "The ID of the Port in the software(OS)",
          "type": "integer"
        },
        "portActive": {
          "description": "Activation status of the port",
          "type": "boolean"
        },
        "portProp": {
          "description": "Priority of the port",
          "type": "integer"
        },
        "portType": {
          "description": "port type",
          "type": "integer"
        }
      }
    },
    "PortEntryPortStatisticInformation": {
      "type": "object",
      "properties": {
        "rxBytes": {
          "description": "Statistic of the ingress port bytes.",
          "type": "integer"
        },
        "rxErrors": {
          "description": "Statistic of the number of ingress Error packets.",
          "type": "integer"
        },
        "rxPackets": {
          "description": "Statistic of the number of ingress packets.",
          "type": "integer"
        },
        "txBytes": {
          "description": "Statistic of the egress port bytes.",
          "type": "integer"
        },
        "txErrors": {
          "description": "Statistic of the number of egress Error packets.",
          "type": "integer"
        },
        "txPackets": {
          "description": "Statistic of the number of egress packets.",
          "type": "integer"
        }
      }
    },
    "PostSuccess": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "RouteEntry": {
      "type": "object",
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        }
      }
    },
    "RouteGetEntry": {
      "type": "object",
      "properties": {
        "destinationIPNet": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "flags": {
          "description": "Route flags",
          "type": "string"
        },
        "gateway": {
          "description": "IP address for nexthop",
          "type": "string"
        },
        "hardwareMark": {
          "description": "index of the route",
          "type": "integer"
        },
        "protocol": {
          "description": "Route protocol",
          "type": "integer"
        },
        "statistic": {
          "type": "object",
          "required": [
            "bytes",
            "packets"
          ],
          "properties": {
            "bytes": {
              "description": "Statistic of the ingress port bytes.",
              "type": "integer"
            },
            "packets": {
              "description": "Statistic of the egress port bytes.",
              "type": "integer"
            }
          }
        },
        "sync": {
          "type": "integer"
        }
      }
    },
    "RouteGetEntryStatistic": {
      "type": "object",
      "required": [
        "bytes",
        "packets"
      ],
      "properties": {
        "bytes": {
          "description": "Statistic of the ingress port bytes.",
          "type": "integer"
        },
        "packets": {
          "description": "Statistic of the egress port bytes.",
          "type": "integer"
        }
      }
    },
    "SessionEntry": {
      "type": "object",
      "properties": {
        "accessNetworkTunnel": {
          "type": "object",
          "properties": {
            "TeID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "coreNetworkTunnel": {
          "type": "object",
          "properties": {
            "teID": {
              "description": "ID of the tunnel",
              "type": "integer"
            },
            "tunnelIP": {
              "description": "Connection network IP address",
              "type": "string"
            }
          }
        },
        "ident": {
          "description": "IP address and netmask",
          "type": "string"
        },
        "sessionIP": {
          "description": "IP address for nexthop",
          "type": "string"
        }
      }
    },
    "SessionEntryAccessNetworkTunnel": {
      "type": "object",
      "properties": {
        "TeID": {
          "description": "ID of the tunnel",
          "type": "integer"
        },
        "tunnelIP": {
          "description": "Access network IP address",
          "type": "string"
        }
      }
    },
    "SessionEntryCoreNetworkTunnel": {
      "type": "object",
      "properties": {
        "teID": {
          "description": "ID of the tunnel",
          "type": "integer"
        },
        "tunnelIP": {
          "description": "Connection network IP address",
          "type": "string"
        }
      }
    },
    "SessionUlClEntry": {
      "type": "object",
      "properties": {
        "ulclArgument": {
          "type": "object",
          "properties": {
            "qfi": {
              "description": "QFI number",
              "type": "integer"
            },
            "ulclIP": {
              "description": "Access network IP address",
              "type": "string"
            }
          }
        },
        "ulclIdent": {
          "description": "IP address and netmask",
          "type": "string"
        }
      }
    },
    "SessionUlClEntryUlclArgument": {
      "type": "object",
      "properties": {
        "qfi": {
          "description": "QFI number",
          "type": "integer"
        },
        "ulclIP": {
          "description": "Access network IP address",
          "type": "string"
        }
      }
    },
    "VlanPortMod": {
      "type": "object",
      "properties": {
        "Dev": {
          "description": "Interface device name",
          "type": "string"
        },
        "Tagged": {
          "description": "Tagged status added",
          "type": "boolean"
        },
        "Vid": {
          "description": "Vlan ID",
          "type": "number"
        }
      }
    }
  }
}`))
}
