// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/loxilb-io/loxilb/api/models"
)

// GetConfigHastateAllHandlerFunc turns a function with the right signature into a get config hastate all handler
type GetConfigHastateAllHandlerFunc func(GetConfigHastateAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConfigHastateAllHandlerFunc) Handle(params GetConfigHastateAllParams) middleware.Responder {
	return fn(params)
}

// GetConfigHastateAllHandler interface for that can handle valid get config hastate all params
type GetConfigHastateAllHandler interface {
	Handle(GetConfigHastateAllParams) middleware.Responder
}

// NewGetConfigHastateAll creates a new http.Handler for the get config hastate all operation
func NewGetConfigHastateAll(ctx *middleware.Context, handler GetConfigHastateAllHandler) *GetConfigHastateAll {
	return &GetConfigHastateAll{Context: ctx, Handler: handler}
}

/*
	GetConfigHastateAll swagger:route GET /config/hastate/all getConfigHastateAll

Get HA State in the device(interface)

Get HA State in the device(interface)
*/
type GetConfigHastateAll struct {
	Context *middleware.Context
	Handler GetConfigHastateAllHandler
}

func (o *GetConfigHastateAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetConfigHastateAllParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetConfigHastateAllOKBody get config hastate all o k body
//
// swagger:model GetConfigHastateAllOKBody
type GetConfigHastateAllOKBody struct {

	// schema
	Schema *models.HAStatusEntry `json:"schema,omitempty"`
}

// Validate validates this get config hastate all o k body
func (o *GetConfigHastateAllOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigHastateAllOKBody) validateSchema(formats strfmt.Registry) error {
	if swag.IsZero(o.Schema) { // not required
		return nil
	}

	if o.Schema != nil {
		if err := o.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getConfigHastateAllOK" + "." + "schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getConfigHastateAllOK" + "." + "schema")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get config hastate all o k body based on the context it is used
func (o *GetConfigHastateAllOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigHastateAllOKBody) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {

	if o.Schema != nil {
		if err := o.Schema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getConfigHastateAllOK" + "." + "schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getConfigHastateAllOK" + "." + "schema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConfigHastateAllOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConfigHastateAllOKBody) UnmarshalBinary(b []byte) error {
	var res GetConfigHastateAllOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
