// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteConfigRouteDestinationIPIPAddressHandlerFunc turns a function with the right signature into a delete config route destination IP IP address handler
type DeleteConfigRouteDestinationIPIPAddressHandlerFunc func(DeleteConfigRouteDestinationIPIPAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConfigRouteDestinationIPIPAddressHandlerFunc) Handle(params DeleteConfigRouteDestinationIPIPAddressParams) middleware.Responder {
	return fn(params)
}

// DeleteConfigRouteDestinationIPIPAddressHandler interface for that can handle valid delete config route destination IP IP address params
type DeleteConfigRouteDestinationIPIPAddressHandler interface {
	Handle(DeleteConfigRouteDestinationIPIPAddressParams) middleware.Responder
}

// NewDeleteConfigRouteDestinationIPIPAddress creates a new http.Handler for the delete config route destination IP IP address operation
func NewDeleteConfigRouteDestinationIPIPAddress(ctx *middleware.Context, handler DeleteConfigRouteDestinationIPIPAddressHandler) *DeleteConfigRouteDestinationIPIPAddress {
	return &DeleteConfigRouteDestinationIPIPAddress{Context: ctx, Handler: handler}
}

/* DeleteConfigRouteDestinationIPIPAddress swagger:route DELETE /config/route/destinationIP/{ip_address} deleteConfigRouteDestinationIpIpAddress

Create a new Load balancer service

Create a new load balancer service with .

*/
type DeleteConfigRouteDestinationIPIPAddress struct {
	Context *middleware.Context
	Handler DeleteConfigRouteDestinationIPIPAddressHandler
}

func (o *DeleteConfigRouteDestinationIPIPAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteConfigRouteDestinationIPIPAddressParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
