// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostConfigHastateHandlerFunc turns a function with the right signature into a post config hastate handler
type PostConfigHastateHandlerFunc func(PostConfigHastateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostConfigHastateHandlerFunc) Handle(params PostConfigHastateParams) middleware.Responder {
	return fn(params)
}

// PostConfigHastateHandler interface for that can handle valid post config hastate params
type PostConfigHastateHandler interface {
	Handle(PostConfigHastateParams) middleware.Responder
}

// NewPostConfigHastate creates a new http.Handler for the post config hastate operation
func NewPostConfigHastate(ctx *middleware.Context, handler PostConfigHastateHandler) *PostConfigHastate {
	return &PostConfigHastate{Context: ctx, Handler: handler}
}

/*
	PostConfigHastate swagger:route POST /config/hastate postConfigHastate

# Informs Current HA state in the device

Informs Current HA state in the device
*/
type PostConfigHastate struct {
	Context *middleware.Context
	Handler PostConfigHastateHandler
}

func (o *PostConfigHastate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostConfigHastateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
